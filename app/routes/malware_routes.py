import csv
from flask import Blueprint, render_template, request, jsonify
import psycopg2
from app.services.file_type_services import validate_and_insert_file_types
from app.services.source_services import insert_sources
from app.services.spyware_category_services import insert_spyware_categories
from app.services.spyware_name_services import insert_spyware_names_with_category
from app.services.signature_services import bulk_insert_signatures, delete_signature, update_signature
from app.services.white_file_services import bulk_insert_white_file_names
from app.services.hits_services import bulk_insert_hits
from config import Config

file_type_bp = Blueprint('filetype', __name__)
source_bp = Blueprint('source', __name__)
spyware_category_bp = Blueprint('spyware_category', __name__)
spyware_name_bp = Blueprint('spyware_name', __name__)
signature_blueprint = Blueprint('signature', __name__)
white_file_blueprint = Blueprint('white_file', __name__)
hits_blueprint = Blueprint('hits_blueprint', __name__)

signature_blueprint1 = Blueprint('signature1', __name__)

@file_type_bp.route('/file-types', methods=['POST'])
def insert_file_types_route():
    data = request.get_json()
    if not data or 'file_types' not in data:
        return jsonify({"error": "Missing 'file_types' in the request body."}), 400
    result = validate_and_insert_file_types(data['file_types'])
    if 'errors' in result and result['errors']:
        return jsonify(result), 400
    return jsonify(result), 201

@source_bp.route('/source', methods=['POST'])
def insert_sources_route():
    data = request.get_json()
    if not data or not isinstance(data, list):
        return jsonify({"error": "Invalid input format. Expected a list of sources."}), 400
    for source in data:
        if 'Name' not in source:
            return jsonify({"error": "Each source must have a 'Name' field."}), 400
    result = insert_sources(data)
    if 'error' in result:
        return jsonify(result), 500
    return jsonify(result), 201

@spyware_category_bp.route('/spyware-category', methods=['POST'])
def insert_spyware_categories_route():
    try:
        data = request.get_json()
        if not data or not isinstance(data, list):
            return jsonify({"error": "Invalid input format. Expected a list of categories."}), 400
        for category in data:
            if not isinstance(category, dict) or 'Category' not in category or not isinstance(category['Category'], str):
                return jsonify({"error": "Each category must have a valid 'Category' field."}), 400
        result, status_code = insert_spyware_categories(data)
        return jsonify(result), status_code
    except Exception as e:
        return jsonify({"error": f"An unexpected error occurred: {str(e)}"}), 500

@spyware_name_bp.route('/spyware-name', methods=['POST'])
def insert_spyware_names():
    try:
        data = request.get_json()
        if not data or not isinstance(data, list):
            return jsonify({"error": "Invalid input format. Expected a list of spyware records."}), 400
        result, status_code = insert_spyware_names_with_category(data)
        return jsonify(result), status_code
    except Exception as e:
        return jsonify({"error": f"An unexpected error occurred: {str(e)}"}), 500

@signature_blueprint.route('/signatures', methods=['POST'])
def bulk_insert_signatures_route():
    try:
        signatures_data = request.get_json()
        if not signatures_data or not isinstance(signatures_data, list):
            return jsonify({"error": "Invalid input. Expected a list of signature records."}), 400
        result, success = bulk_insert_signatures(signatures_data)
        if success:
            return jsonify(result), 201
        else:
            return jsonify(result), 400
    except Exception as e:
        return jsonify({"error": f"An unexpected error occurred: {str(e)}"}), 500

@signature_blueprint.route('/signatures/<signature>', methods=['DELETE'])
def delete_signature_route(signature):
    try:
        result, success = delete_signature(signature)
        if success:
            return jsonify(result), 200
        else:
            return jsonify(result), 400
    except Exception as e:
        return jsonify({"error": f"An unexpected error occurred: {str(e)}"}), 500

@signature_blueprint.route('/signatures/<signature>', methods=['PUT'])
def update_signature_route(signature):
    try:
        signature_data = request.get_json()
        if not signature_data or not isinstance(signature_data, dict):
            return jsonify({"error": "Invalid input. Expected a JSON object with signature details."}), 400
        
        if 'SpywareName' not in signature_data or 'EntryStatus' not in signature_data:
            return jsonify({"error": "Both 'SpywareName' and 'EntryStatus' are required fields."}), 400
        
        result, success = update_signature(signature, signature_data)
        if success:
            return jsonify(result), 200
        else:
            return jsonify(result), 400
    except Exception as e:
        return jsonify({"error": f"An unexpected error occurred: {str(e)}"}), 500

@white_file_blueprint.route('/whitefilenames', methods=['POST'])
def insert_white_file_names():
    try:
        data = request.get_json()
        if not data or not isinstance(data, list):
            return jsonify({"error": "Invalid input. Expected a list of white file name records."}), 400
        result, success = bulk_insert_white_file_names(data)
        if success:
            return jsonify(result), 201
        else:
            return jsonify(result), 400
    except Exception as e:
        return jsonify({"error": f"An unexpected error occurred: {str(e)}"}), 500

@hits_blueprint.route('/hits', methods=['POST'])
def bulk_insert_hits_route():
    try:
        hits_data = request.get_json()
        if not hits_data or not isinstance(hits_data, list):
            return jsonify({"error": "Invalid input. Expected a list of hits records."}), 400
        result, success = bulk_insert_hits(hits_data)
        if success:
            return jsonify(result), 201
        else:
            return jsonify(result), 400
    except Exception as e:
        return jsonify({"error": f"An unexpected error occurred: {str(e)}"}), 500

@signature_blueprint.route('/upload-signatures', methods=['POST'])
def upload_signatures():
    try:
        if 'file' not in request.files:
            return jsonify({"error": "No file part in the request."}), 400
        file = request.files['file']
        if file.filename == '':
            return jsonify({"error": "No file selected for uploading."}), 400
        if not file.filename.endswith('.csv'):
            return jsonify({"error": "Invalid file format. Please upload a CSV file."}), 400
        file.stream.seek(0)
        csv_data = file.read().decode('utf-8').splitlines()
        reader = csv.DictReader(csv_data)
        signatures_data = [row for row in reader]
        result, success = bulk_insert_signatures(signatures_data)
        if success:
            return jsonify(result), 201
        else:
            return jsonify(result), 400
    except Exception as e:
        return jsonify({"error": f"An unexpected error occurred: {str(e)}"}), 500

@signature_blueprint1.route('/abc', methods=['GET', 'POST'])
def upload_signature_page():
    return render_template('/pages/upload_signature.html')
