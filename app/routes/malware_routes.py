import csv
from flask import Blueprint, render_template, request, jsonify
import psycopg2
from app.models.model import FileType
from app.services.file_type_services import validate_and_insert_file_types
from app.services.source_services import insert_sources
from app.services.spyware_category_services import insert_spyware_categories
from app.services.spyware_name_services import insert_spyware_names_with_category
from app.services.signature_services import bulk_insert_signatures
from app.services.white_file_services import bulk_insert_white_file_names
from app.services.hits_services import bulk_insert_hits
from app.services.malicious_urls_services import bulk_insert_malicious_urls
from config import Config

file_type_bp = Blueprint('filetype', __name__)
source_bp = Blueprint('source', __name__)
spyware_category_bp = Blueprint('spyware_category', __name__)
spyware_name_bp = Blueprint('spyware_name', __name__)
signature_blueprint = Blueprint('signature', __name__)
white_file_blueprint = Blueprint('white_file', __name__)
hits_blueprint = Blueprint('hits_blueprint', __name__)
malicious_urls_bp = Blueprint('malicious_urls', __name__)
test = Blueprint('test', __name__)
pg_connection = Blueprint('postgres', __name__)

signature_blueprint1 = Blueprint('signature1', __name__)

@file_type_bp.route('/file-types', methods=['POST'])
def insert_file_types_route():
    data = request.get_json()
    
    if not data or 'file_types' not in data:
        return jsonify({"error": "Missing 'file_types' in the request body."}), 400
    
    # Pass only file_types to the service
    result = validate_and_insert_file_types(data['file_types'])
    
    # Check if there are any validation errors or issues with insertion
    if 'errors' in result and result['errors']:
        return jsonify(result), 400  # Return errors and status code 400
    
    # Return the result along with the appropriate success status
    return jsonify(result), 201


@source_bp.route('/source', methods=['POST'])
def insert_sources_route():
    """
    API endpoint to insert multiple sources in bulk.
    """
    data = request.get_json()

    # Validate that the input is a list of sources
    if not data or not isinstance(data, list):
        return jsonify({"error": "Invalid input format. Expected a list of sources."}), 400

    # Ensure each source has a 'Name' field
    for source in data:
        if 'Name' not in source:
            return jsonify({"error": "Each source must have a 'Name' field."}), 400

    # Call the service to insert the sources
    result = insert_sources(data)

    if 'error' in result:
        return jsonify(result), 500  # Internal server error if insertion fails
    return jsonify(result), 201  # Created status if insertion is successful

@spyware_category_bp.route('/spyware-category', methods=['POST'])
def insert_spyware_categories_route():
    """
    API endpoint to insert multiple spyware categories in bulk.
    """
    data = request.get_json()

    # Validate that the input is a list of categories
    if not data or not isinstance(data, list):
        return jsonify({"error": "Invalid input format. Expected a list of categories."}), 400

    # Ensure each category has a 'category' field
    for category in data:
        if 'Category' not in category:
            return jsonify({"error": "Each category must have a 'Category' field."}), 400

    # Call the service to insert the categories
    result = insert_spyware_categories(data)

    if 'error' in result:
        return jsonify(result), 500  # Internal server error if insertion fails
    return jsonify(result), 201  # Created status if insertion is successful

@spyware_name_bp.route('/spyware-name', methods=['POST'])
def insert_spyware_names():
    """
    API endpoint to insert spyware names with categories.
    """
    try:
        # Parse JSON payload from the request
        data = request.get_json()

        # Validate input format
        if not data or not isinstance(data, list):
            return jsonify({"error": "Invalid input format. Expected a list of spyware records."}), 400

        # Call the service function to handle the insert
        result, status_code = insert_spyware_names_with_category(data)
        return jsonify(result), status_code
    except Exception as e:
        return jsonify({"error": f"An unexpected error occurred: {str(e)}"}), 500

@signature_blueprint.route('/signatures', methods=['POST'])
def bulk_insert_signatures_route():
    """
    Route for handling bulk insertion of signatures.
    """
    try:
        # Parse request JSON
        signatures_data = request.get_json()
        if not signatures_data or not isinstance(signatures_data, list):
            return jsonify({"error": "Invalid input. Expected a list of signature records."}), 400

        # Call the service for bulk insertion
        result, success = bulk_insert_signatures(signatures_data)
        if success:
            return jsonify(result), 201
        else:
            return jsonify(result), 400

    except Exception as e:
        return jsonify({"error": f"An unexpected error occurred: {str(e)}"}), 500
    
@white_file_blueprint.route('/whitefilenames', methods=['POST'])
def insert_white_file_names():
    try:
        data = request.get_json()
        if not data or not isinstance(data, list):
            return jsonify({"error": "Invalid input. Expected a list of white file name records."}), 400
        
        result, success = bulk_insert_white_file_names(data)
        
        if success:
            return jsonify(result), 201
        else:
            return jsonify(result), 400
    
    except Exception as e:
        return jsonify({"error": f"An unexpected error occurred: {str(e)}"}), 500
    

@hits_blueprint.route('/hits', methods=['POST'])
def bulk_insert_hits_route():
    """
    Route for handling bulk insertion of hits using Signature directly.
    """
    try:
        # Parse request JSON
        hits_data = request.get_json()
        if not hits_data or not isinstance(hits_data, list):
            return jsonify({"error": "Invalid input. Expected a list of hits records."}), 400

        # Call the service for bulk insertion
        result, success = bulk_insert_hits(hits_data)
        if success:
            return jsonify(result), 201
        else:
            return jsonify(result), 400

    except Exception as e:
        return jsonify({"error": f"An unexpected error occurred: {str(e)}"}), 500
    
@malicious_urls_bp.route('/malicious_urls', methods=['POST'])
def create_malicious_urls():
    """
    API endpoint for bulk insertion of malicious URLs.
    """
    try:
        data = request.get_json()
        if not isinstance(data, list):
            return jsonify({"error": "Invalid payload format, expected a list of records."}), 400

        # Call the service to handle bulk insert
        result, success = bulk_insert_malicious_urls(data)
        if success:
            return jsonify(result), 201
        else:
            return jsonify(result), 400
    except Exception as e:
        return jsonify({"error": f"An unexpected error occurred: {str(e)}"}), 500
    
@signature_blueprint.route('/upload-signatures', methods=['POST'])
def upload_signatures():
    """
    Route for uploading and processing signatures from a CSV file.
    """
    try:
        # Check if the request contains a file
        if 'file' not in request.files:
            return jsonify({"error": "No file part in the request."}), 400

        file = request.files['file']
        if file.filename == '':
            return jsonify({"error": "No file selected for uploading."}), 400

        # Ensure the uploaded file is a CSV
        if not file.filename.endswith('.csv'):
            return jsonify({"error": "Invalid file format. Please upload a CSV file."}), 400

        # Parse the CSV file
        file.stream.seek(0)
        csv_data = file.read().decode('utf-8').splitlines()
        reader = csv.DictReader(csv_data)

        # Convert CSV data to a list of dictionaries
        signatures_data = [row for row in reader]

        # Call the bulk insertion function
        result, success = bulk_insert_signatures(signatures_data)
        if success:
            return jsonify(result), 201
        else:
            return jsonify(result), 400

    except Exception as e:
        return jsonify({"error": f"An unexpected error occurred: {str(e)}"}), 500

# @signature_blueprint1.route('/app/pages/upload_signature', methods=['GET'])
# def upload_signature_page():
#     """
#     Serve the HTML page for uploading signatures.
#     """
#     return render_template('upload_signatures.html')

# @signature_blueprint1.route('/upload_signature', methods=['GET', 'POST'])
# def upload_signature_page():
#     print("called")
#     return render_template('/app/pages/upload_signature.html')

@signature_blueprint1.route('/abc', methods=['GET', 'POST'])
def upload_signature_page():
    print("called")
    return render_template('/pages/upload_signature.html')

@test.route('/ping', methods=['GET'])
def ping():
    """
    Simple endpoint to test host connection.
    Returns a JSON response with a success message.
    """
    return jsonify({"status": "success", "message": "Host is reachable!"}), 200

@pg_connection.route('/test-db-connection', methods=['GET'])
def test_db_connection():
    try:
        # Connect to the database
        connection = psycopg2.connect(
            host=Config.POSTGRES_HOST,
            port=Config.POSTGRES_PORT,
            database=Config.POSTGRES_DB,
            user=Config.POSTGRES_USER,
            password=Config.POSTGRES_PASSWORD
        )
        cursor = connection.cursor()
        cursor.execute("SELECT 1;")  # Simple test query
        result = cursor.fetchone()

        # Clean up
        cursor.close()
        connection.close()

        # Return success response
        return jsonify({"status": "success", "message": "DB connection is working!", "query_result": result}), 200
    except Exception as e:
        # Return error response
        return jsonify({"status": "error", "message": str(e)}), 500
